services:
    mysql:
        name: MySQL Database
        description: MySQL database server for Akaunting
        triggeredBy:
            - postDevcontainerStart
        commands:
            start: |
                docker run -d --name akaunting-mysql \
                    -e MYSQL_ROOT_PASSWORD=pass \
                    -e MYSQL_DATABASE=akaunting \
                    -e MYSQL_USER=akaunting \
                    -e MYSQL_PASSWORD=pass \
                    -p 3306:3306 \
                    mysql:8.0
            ready: docker exec akaunting-mysql mysqladmin ping -h localhost -u root -ppass
            stop: docker stop akaunting-mysql && docker rm akaunting-mysql

    laravel-server:
        name: Akaunting Application Server
        description: Akaunting Laravel application server
        triggeredBy:
            - manual
        commands:
            start: php artisan serve --host=0.0.0.0 --port=8000
            ready: curl http://localhost:8000 -s -f -o /dev/null

    queue-worker:
        name: Laravel Queue Worker
        description: Process background jobs for Akaunting
        triggeredBy:
            - manual
        commands:
            start: php artisan queue:work --verbose --tries=3 --timeout=90
            stop: pkill -f "artisan queue:work"

    npm-dev:
        name: NPM Development Server
        description: Frontend asset compilation with hot reload
        triggeredBy:
            - manual
        commands:
            start: npm run dev
            ready: curl http://localhost:5173 -s -f -o /dev/null

tasks:
    install-dependencies:
        name: Install Dependencies
        description: Install Composer and NPM dependencies
        triggeredBy:
            - postDevcontainerStart
        command: |
            echo "📦 Installing dependencies..."
            
            # Install Composer dependencies
            composer install --no-dev --optimize-autoloader
            echo "✅ Composer dependencies installed"
            
            # Install NPM dependencies
            npm install
            echo "✅ NPM dependencies installed"
            
            # Build frontend assets
            npm run dev
            echo "✅ Frontend assets built"

    install-akaunting:
        name: Install Akaunting
        description: Complete Akaunting installation using artisan install command
        triggeredBy:
            - manual
        dependsOn:
            - install-dependencies
        command: |
            echo "🚀 Installing Akaunting..."
            
            # Wait for database to be ready
            echo "⏳ Waiting for database connection..."
            until docker exec akaunting-mysql mysqladmin ping -h localhost -u root -ppass > /dev/null 2>&1; do
                sleep 2
                echo "Still waiting for database..."
            done
            echo "✅ Database is ready"
            
            # Run Akaunting installation
            php artisan install \
                --db-name="akaunting" \
                --db-username="root" \
                --db-password="pass" \
                --admin-email="admin@company.com" \
                --admin-password="123456"
            
            echo "✅ Akaunting installation completed!"
            echo "🎉 You can now access Akaunting at http://localhost:8000"
            echo "📧 Admin email: admin@company.com"
            echo "🔑 Admin password: 123456"

    install-sample-data:
        name: Install Sample Data
        description: Seed Akaunting with sample data (optional)
        triggeredBy:
            - manual
        command: |
            echo "📊 Installing sample data..."
            
            # Create sample data
            php artisan sample-data:seed
            
            echo "✅ Sample data installed successfully!"

    fresh-install:
        name: Fresh Akaunting Installation
        description: Complete fresh installation with sample data
        triggeredBy:
            - manual
        dependsOn:
            - install-dependencies
        command: |
            echo "🔄 Performing fresh Akaunting installation..."
            
            # Wait for database
            echo "⏳ Waiting for database connection..."
            until docker exec akaunting-mysql mysqladmin ping -h localhost -u root -ppass > /dev/null 2>&1; do
                sleep 2
            done
            
            # Drop and recreate database
            docker exec akaunting-mysql mysql -u root -ppass -e "DROP DATABASE IF EXISTS akaunting; CREATE DATABASE akaunting;"
            
            # Install Akaunting
            php artisan install \
                --db-name="akaunting" \
                --db-username="root" \
                --db-password="pass" \
                --admin-email="admin@company.com" \
                --admin-password="123456"
            
            # Add sample data
            php artisan sample-data:seed
            
            # Build assets
            npm run build
            
            echo "✅ Fresh installation with sample data completed!"

    run-tests:
        name: Run Akaunting Tests
        description: Execute PHPUnit test suite
        triggeredBy:
            - manual
        command: |
            echo "🧪 Running Akaunting tests..."
            
            # Prepare test environment
            php artisan config:cache --env=testing
            
            # Run tests
            php artisan test --parallel
            
            echo "✅ Tests completed!"

    optimize-performance:
        name: Optimize Performance
        description: Cache routes, config, and views for better performance
        triggeredBy:
            - manual
        command: |
            echo "⚡ Optimizing Akaunting performance..."
            
            # Cache configuration
            php artisan config:cache
            
            # Cache routes
            php artisan route:cache
            
            # Cache views
            php artisan view:cache
            
            # Optimize autoloader
            composer dump-autoload --optimize
            
            echo "✅ Performance optimization completed!"

    clear-cache:
        name: Clear All Caches
        description: Clear Laravel application, config, route, and view caches
        triggeredBy:
            - manual
        command: |
            echo "🧹 Clearing all caches..."
            
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan queue:clear
            
            # Clear compiled views
            rm -rf storage/framework/views/*.php
            
            # Clear session files
            rm -rf storage/framework/sessions/*
            
            echo "✅ All caches cleared!"

    backup-database:
        name: Backup Database
        description: Create a backup of the Akaunting database
        triggeredBy:
            - manual
        command: |
            echo "💾 Creating database backup..."
            
            # Create backup directory
            mkdir -p storage/backups
            
            # Create backup with timestamp
            BACKUP_FILE="storage/backups/akaunting_backup_$(date +%Y%m%d_%H%M%S).sql"
            
            # Export database
            docker exec akaunting-mysql mysqldump -u root -ppass akaunting > $BACKUP_FILE
            
            echo "✅ Database backup created: $BACKUP_FILE"

    update-dependencies:
        name: Update Dependencies
        description: Update Composer and NPM dependencies
        triggeredBy:
            - manual
        command: |
            echo "📦 Updating dependencies..."
            
            # Update Composer dependencies
            composer update --no-dev --optimize-autoloader
            
            # Update NPM dependencies
            npm update
            
            # Rebuild assets
            npm run build
            
            echo "✅ Dependencies updated!"

    development-setup:
        name: Development Environment Setup
        description: Complete development setup for Akaunting
        triggeredBy:
            - manual
        dependsOn:
            - install-dependencies
        command: |
            echo "🛠️ Setting up development environment..."
            
            # Wait for database
            until docker exec akaunting-mysql mysqladmin ping -h localhost -u root -ppass > /dev/null 2>&1; do
                sleep 2
            done
            
            # Install Akaunting
            php artisan install \
                --db-name="akaunting" \
                --db-username="root" \
                --db-password="pass" \
                --admin-email="admin@company.com" \
                --admin-password="123456"
            
            # Install sample data
            php artisan sample-data:seed
            
            # Set proper permissions
            chmod -R 775 storage bootstrap/cache
            
            echo "🎉 Development environment ready!"
            echo "🌐 Access Akaunting at: http://localhost:8000"
            echo "📧 Admin: admin@company.com / 123456"

    security-check:
        name: Security Audit
        description: Run security checks on dependencies
        triggeredBy:
            - manual
        command: |
            echo "🔒 Running security audit..."
            
            # Check Composer dependencies for vulnerabilities
            composer audit
            
            # Check NPM dependencies for vulnerabilities
            npm audit
            
            echo "✅ Security audit completed!"

    logs-tail:
        name: Tail Application Logs
        description: Monitor Laravel application logs in real-time
        triggeredBy:
            - manual
        command: |
            echo "📋 Tailing application logs..."
            tail -f storage/logs/laravel.log